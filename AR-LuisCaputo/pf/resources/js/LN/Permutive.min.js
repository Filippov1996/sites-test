(() => {
    var d = (e, t) => () => (t || e((t = {
        exports: {}
    }).exports, t), t.exports);
    var u = d((exports, module) => {
        var article = JSON.parse(document.getElementById("script-permutive").getAttribute("data-article")),
            layout = document.getElementById("script-permutive").getAttribute("data-layout"),
            serializedGetCookie = document.getElementById("script-permutive").dataset.getCookie,
            permutiveGetCookie = eval(`(${serializedGetCookie})`),
            getTemplateType = e => ["LN-Home_Main", "LN10-Home_Main"].includes(e) ? "home" : e.includes("nota") ? "article" : "section",
            userCookie = permutiveGetCookie("ProductoPremiumId") || [],
            isUserLoggedIn = !!permutiveGetCookie("token"),
            isUserSubscribed = userCookie.includes("2"),
            user = {
                loggedIn: isUserLoggedIn,
                suscribed: isUserSubscribed,
                ...userCookie && userCookie.length && {
                    typeOfSuscription: userCookie.split(",")
                }
            },
            type = getTemplateType(layout),
            permutivecustomProperties = {
                page: {
                    classifications_watson: {
                        categories: "$alchemy_taxonomy",
                        concepts: "$alchemy_concepts",
                        emotion: "$alchemy_document_emotion",
                        entities: "$alchemy_entities",
                        keywords: "$alchemy_keywords",
                        sentiment: "$alchemy_document_sentiment"
                    },
                    type,
                    user
                }
            },
            conditionalArticleData = (e, t) => {
                Object.keys(article).length && (e.page.article = t)
            };
        conditionalArticleData(permutivecustomProperties, article);
        (function(e, t, a, s) {
            if (!e) {
                e = e || {}, window.permutive = e, e.q = [];
                var c = function() {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function(o) {
                        return (o ^ (window.crypto || window.msCrypto).getRandomValues(new Uint8Array(1))[0] & 15 >> o / 4).toString(16)
                    })
                };
                e.config = s || {}, e.config.apiKey = t, e.config.workspaceId = a, e.config.environment = e.config.environment || "production", (window.crypto || window.msCrypto) && (e.config.viewId = c());
                for (var n = ["addon", "identify", "track", "trigger", "query", "segment", "segments", "ready", "on", "once", "user", "consent"], i = 0; i < n.length; i++) {
                    var r = n[i];
                    e[r] = function(o) {
                        return function() {
                            var g = Array.prototype.slice.call(arguments, 0);
                            e.q.push({
                                functionName: o,
                                arguments: g
                            })
                        }
                    }(r)
                }
            }
        })(window.permutive, "2f46069c-4d57-4535-9aeb-582079606f3b", "867f8423-d142-4fd1-ae8d-1a9bbbdf2358", {
            consentRequired: !1
        });
        window.googletag = window.googletag || {}, window.googletag.cmd = window.googletag.cmd || [], window.googletag.cmd.push(function() {
            if (window.googletag.pubads().getTargeting("permutive").length === 0) {
                var e = window.localStorage.getItem("_pdfps");
                window.googletag.pubads().setTargeting("permutive", e ? JSON.parse(e) : []);
                var t = window.localStorage.getItem("permutive-id");
                t && (window.googletag.pubads().setTargeting("puid", t), window.googletag.pubads().setTargeting("ptime", Date.now().toString())), window.permutive.config.viewId && window.googletag.pubads().setTargeting("prmtvvid", window.permutive.config.viewId), window.permutive.config.workspaceId && window.googletag.pubads().setTargeting("prmtvwid", window.permutive.config.workspaceId)
            }
        });
        permutive.addon("web", permutivecustomProperties)
    });
    u();
})();